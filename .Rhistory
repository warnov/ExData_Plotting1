nxt()
plot(cars, xlim = c(10, 15))
plot(cars, pch=2)
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
info()
bye()
exit
R.home()
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL")
library(RMySQL)
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");
result
dbDisconnect(ucscDb);
hg19<-dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
hg19<-dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
affyData <- dbReadTable(hg19,"affyU133Plus2")
warnings()
affyData
head(affyData)
str(affyData)
summary(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMiss <- fetch(query);
length(affyMiss)
affyMiss
summary(affyMiss)
str(affyMiss)
quantile(affyMiss$misMatches)
affyMiss <- fetch(query, 10);
dbClearResult(query);
dimm(affyData)
dim(affyData)
dim(affyMis)
dim(affyMiss)
dbDisconnect(hg19)
1/0
1/Inf
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
h5createGroup("example.h5","foo")
h5createGroup("example.h5","baa")
h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
B <- matrix(1:10,nr=5,nc=2)
identical(A,B)
h5write(A,"example.h5", "foo/A")
B=array(seq(0.1,2.0,by=0.1)),dim=c(5,2,2)
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,scale) <- "liter"
h5write(B,"example.h5", "foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5:,seq(0,1,length.out = 5),c("ab", "cde", "fghi","a","s"), stringsAsFactors = FALSE)
df=data.frame(1L:5L:,seq(0,1,length.out = 5),c("ab", "cde", "fghi","a","s"), stringsAsFactors = FALSE)
df=data.frame(1L:5L,seq(0,1,length.out = 5),c("ab", "cde", "fghi","a","s"), stringsAsFactors = FALSE)
df
summary(df)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
ls()
dir()
readA
readdf=h5read("example.h5","df")
readdf
h5write(c(12,13,14),"example.h5","foo/A", index=list(1:3.1))
h5write(c(12,13,14),"example.h5","foo/A", index=list(1:3,1))
h5read("example.h5","foo/A")
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
url="http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
install.packages("XML")
library(XML)
html=htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html,"//title", xmlValue)
xmlValue
xpathSApply(html,"//title")
xpathSApply(html,"//td[@id='col-citedby']", xmlValue)
a=xpathSApply(html,"//td[@id='col-citedby']", xmlValue)
a;
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue);
length(a)
class(a)
list[0]
liobrary(httr)
library(httr)
html2=GET(url)
content2=content(html2, as="text")
parsedHtml=htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
oauth_endpoints("github")
myapp <- oauth_app("warcoursera", key = "9d399885a134027528a5", "03ac4d7db08f0c48dd38f953cb0f9d821e198347")
myapp <- oauth_app("github", key = "9d399885a134027528a5", "03ac4d7db08f0c48dd38f953cb0f9d821e198347")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
myapp <- oauth_app("warcoursera", key = "9d399885a134027528a5", "03ac4d7db08f0c48dd38f953cb0f9d821e198347")
github_token <- oauth2.0_token(oauth_endpoints("warcoursera"), myapp)
myapp <- oauth_app("github", key = "9d399885a134027528a5", "03ac4d7db08f0c48dd38f953cb0f9d821e198347")
github_token <- oauth2.0_token(oauth_endpoints("warcoursera"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile = "sspid.csv")
acs <- read.csv("sspid.csv")
summary(acs)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
summary(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
?sqldf
warpbreaks
a1r <- head(warpbreaks)
a1
a1r
a1s <- sqldf("select * from warpbreaks limit 6")
a1s <- sqldf("select * from warpbreaks limit 6",password = "waltenuma.1")
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "housing.csv")
housing=read.csv("housing.csv")
dplyr
library(dplyr)
install.packages("dplyr")
1+1
library(dplyr)
?dplyr
class(housing)
chicago <- readRDS("chicago.rds")
class(housing)
summary(housing)
names(hpusing)
names(housing)
housing$ACR
housing$ACR==3
housing[housing$ACR==3]
filter(housing, ACR==3)
length(filter(housing, ACR==3))
length(housing)
housing=read.csv("housing.csv")
length(housing)
bighouses <- filter(housing, WWW=34)
bighouses <- filter(housing, WWW==34)
bighouses <- filter(housing, ACR==34)
length(bighouses)
head*bighouses
head(bighouses)
str(bighouses)
identical(housing, bighouses)
nrow(housing)
nrow(bighouses)
bighouses <- filter(housing, ACR==3)
nrow(bighouses)
bighouses <- filter(housing, ACR==3 & AGS==6)
nrow(bighouses)
agricultureLogical <- filter(housing, ACR==3 & AGS==6)
which(agricultureLogical)
x <- c(2,3,5,6,7)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[(X$var1 <= 3 & X$var3 > 11),]
agricultureLogical <- housing[(housing$ACR==3 & housing$AGS==6)]
agricultureLogical <- housing[(housing$ACR==3 & housing$AGS==6),]
agricultureLogical
head(agricultureLogical)
str(agricultureLogical)
nrow(agricultureLogical)
which(agricultureLogical)
class(agricultureLogical)
?which
X[which(X$var2 > 8),]
X[which(X$var2 > 1),]
housing[which(housing$ACR==3 & housing$AGS==6),]
agricultureLogical <-  housing[which(housing$ACR==3 & housing$AGS==6),]
head(agricultureLogical, 3)
class (agricultureLogical)
simpleHousing <- select(housing,ACR, AGS)
head(simpleHousingsing)
head(simpleHousing)
nrow(simpleHousing)
simpleHousing$ACR==3
simpleHousing$ACR==3 & simpleHousing$AGS==6
agricultureLogical <-  (simpleHousing$ACR==3 & simpleHousing$AGS==6)
class(agricultureLogical)
which(agricultureLogical)
head(which(agricultureLogical),3)
install.packages("jpeg")
library(jpeg)
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg")
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"))
download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "jeff.jpg")
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"))
library(jpg)
library(jpeg)
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"))
img <- readJPEG("jeff.jpg")
img
quantile(img)
img <- readJPEG("jeff.jpg",native = true)
img <- readJPEG("jeff.jpg",native = T)
quantile(img)
?quantile
quantile(img, probs=seq(0,1,0.1))
quantile(img, probs=seq(0,1,0.1))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "gdp.csv")
gdp <- read.csv("gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "edu.csv")
edu <- read.csv("edu.csv")
names(gdp)
head(edu)
gdp$CountryCode
edu$CountryCode
head(gdp)
gdp$X
intersect(gdp$X, edu$CountryCode)
countryMatches <- intersect(gdp$X, edu$CountryCode)
length(countryMatches)
countryMatches[13]
mergedData <- merge(gdp,edu,by.x="X",by.y="CountryCode")
head(mergedData)
head(mergedData, 3)
str(mergedData, 3)
nrow(mergedData)
mergedData <- merge(gdp,edu,by.x="X",by.y="CountryCode", all=true)
mergedData <- merge(gdp,edu,by.x="X",by.y="CountryCode", all=T)
nrow(mergedData)
mergedData <- merge(gdp,edu,by.x="X",by.y="CountryCode")
sorted <- sort(mergedData$Gross.domestic.product.2012, decreasing = TRUE)
sorted[13]
sorted[,13]
sorted
head(gdp$X, gdp$Gross.domestic.product.2012)
head(select(gdp$X, gdp$Gross.domestic.product.2012))
select(gdp$X, gdp$Gross.domestic.product.2012)
library(dplyr)
select(gdp$X, gdp$Gross.domestic.product.2012)
select(gdp,X,gdp$Gross.domestic.product.2012)
select(gdp,X,Gross.domestic.product.2012)
head(select(gdp,X,Gross.domestic.product.2012), 10)
filter(select(gdp,X,Gross.domestic.product.2012), 10),!is.na(Gross.domestic.product.2012))
filter(gdp, !is.na(Gross.domestic.product.2012))
vgdp <- gdp[(gdp$Gross.domestic.product.2012!=NA)]
vgdp <- gdp[(gdp$Gross.domestic.product.2012>3]
vgdp <- gdp[(gdp$Gross.domestic.product.2012>3)]
vgdp <- gdp[(gdp$Gross.domestic.product.2012>3),]
vgdp <- gdp[(gdp$Gross.domestic.product.2012>3,)]
names(gdp)
gdp$Gross.domestic.product.2012
gdp <- read.table("gdp.csv",skip = 10)
gdp
gdp <- read.csv("gdp.csv")
gdp <- read.csv("gdp.csv")
gdp
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "gdp.csv")
gdp <- read.csv("gdp.csv")
gdp
names(gdp)
t
gdp <- read.csv("gdp.csv")
gdp
names(gdp)
mergedData <- merge(gdp,edu,by.x="CountryCode",by.y="CountryCode")
nrow(mergedData)
mergedData
names(mergedData)
sort(mergedData, Ranking decreasing = true)
sort(mergedData, Ranking, decreasing = true)
sort(mergedData, Ranking, decreasing = T)
sort(mergedData, mergedData$Ranking, decreasing = T)
mergedData[order(mergedData$Ranking),]
head(mergedData[order(mergedData$Ranking),])
head(mergedData[order(mergedData$Ranking),]$Rankinj)
head(mergedData[order(mergedData$Ranking),]$Ranking)
head(mergedData[order(mergedData$Ranking,decreasing = T),]$Ranking)
head(mergedData$Ranking)
orderedData <- mergedData[order(mergedData$Ranking,decreasing = T),]$Ranking
orderedData <- mergedData[order(mergedData$Ranking,decreasing = T),]
head(orderedData)
head(orderedData$Ranking)
orderedData$Ranking[13,]
orderedData[13,]
orderedData[3,]
orderedData[13,]
nrow(mergedData)
nrow(orderedData)
orderedData[189]
orderedData[189,]
orderedData[190,]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "allgdp.csv")
hioecd <- mergedData[(mergedData$Income.Group=="High income: OECD")]
hioecd <- mergedData[(mergedData$Income.Group=="High income: OECD"),]
names(hioecd)
names(mergedData)
nrows(hioecd)
nrow(hioecd)
?average
x <- c(5,5,4.5,5)
mean(x)
mean(c(3,5,4.5,5))
mean(c(3,5,4.5,3))
mean(c(5,5,5,5))
mean(hioecd$Ranking)
hinoecd <- mergedData[(mergedData$Income.Group=="High income: nonOECD"),]
nrow(hinoecd)
mean(hinoecd$Ranking)
install.packages("Hmisc")
library(Hmisc)
rankGroups <- cut(mergedData$Ranking,breaks = quantile(mergedData$Ranking))
class (rankGroups)
rankGroups
table(rankGroups,mergedData$Ranking)
rankGroups <- cut(mergedData$Ranking,breaks = quantile(mergedData$Ranking, probs=seq(0,1,0.2))))
rankGroups <- cut(mergedData$Ranking,breaks = quantile(mergedData$Ranking, probs=seq(0,1,0.2)))
rankGroups
names(rankGroups)
table(rankGroups,mergedData$Ranking)
rankGroups[5,]
table(rankGroups)
table(rankGroups, mergedData$Income.Group)
mergedData$rankGroups=cut(mergedData$Ranking,breaks=quantile(mergedData$Ranking,probs = (seq(0,1,0.2))))
select(mergedData$Ranking,mergedData$rankGroups)
select(mergedData, Ranking, rankGroups)
table(mergedData$rankGroups)
table(mergedData$rankGroups,mergedData$Income.Group)
190-152
mergedData[(mergedData$Ranking>=152 & mergedData$Income.Group=="Lower middle income")]
mergedData[(mergedData$Ranking>=152 & mergedData$Income.Group=="Lower middle income"),]
mergedData[(mergedData$Ranking>=152 & mergedData$Income.Group=="Lower middle income"),mergedData$Ranking]
mergedData[(mergedData$Ranking>=152 & mergedData$Income.Group=="Lower middle income"),]
matches <- mergedData[(mergedData$Ranking>=152 & mergedData$Income.Group=="Lower middle income"),]
select(matches, Ranking, Income.Group)
nrow(matches)
matches2=mergedData[(mergedData$Ranking>152 & mergedData$Income.Group=="Lower middle income")]
matches2=mergedData[(mergedData$Ranking>152 & mergedData$Income.Group=="Lower middle income"),]
select(matches2, Ranking, Income.Group)
nrow(matches2)
select(CountryCode, matches2, Ranking, Income.Group)
select(matches2, CountryCode, Ranking, Income.Group)
ls
ls()
mean(hioecd)
mean(hinoecd)
hioecd
mean(hinoecd$Ranking)
mean(hioecd$Ranking)
table(mergedData$rankGroups,mergedData$Income.Group)
library(Hmisc)
mergedData$rgroups=cut2(mergedData$Ranking,g=5)
table(mergedData$rgroups)
mergedData$rgroups=cut2(mergedData$Ranking,m=38)
table(mergedData$rgroups)
mergedData$rgroups=cut2(mergedData$Ranking,m=10)
table(mergedData$rgroups)
mergedData$rgroups=cut2(mergedData$Ranking,m=38)
table(mergedData$rgroups)
edu <- read.csv("edu.csv")
names(edu)
gdp <- read.csv("gdp.csv")
names(gdp)
merged <- merge(gdp,edu,by.x=gdp$CountryCode, by.y=edu$CountryCode)
mergedData <- merge(gdp,edu,by.x="CountryCode",by.y="CountryCode")
gdp <- read.csv("gdp1.csv")
names(gdp)
merged <- merge(gdp,edu,by.x=gdp$CountryCode, by.y=edu$CountryCode)
mergedData <- merge(gdp,edu,by.x="CountryCode",by.y="CountryCode")
nrow(merged)
nrow(mergedData)
rankGroups <- cut(mergedData$GDP,breaks = quantile(mergedData$GDP, probs=seq(0,1,0.2)))
mergedData$GDP
class(mergedData$GDP)
rankGroups <- cut(as.numeric(mergedData$GDP),breaks = quantile(mergedData$GDP, probs=seq(0,1,0.2)))
mergedData$nGDP=as.numeric(mergedData$GDP)
mergedData$nGDP
mergedData$nGDP=as.double(mergedData$GDP)
mergedData$nGDP
class(mergedData$GDP)[1]
mergedData$GDP)[1]
mergedData$GDP[1]
mergedData$GDP[1,]
mergedData$GDP
mergedData$GDP[1]
class(mergedData$GDP[1])
as.double(mergedData$GDP[1])
as.numeric(mergedData$GDP[1])
mergedData$GDP[1]*1
as.numeric(as.character(mergedData$GDP[1])
)
as.numeric(as.character(mergedData$GDP[1]))
as.character(mergedData$GDP[1])
as.double(as.character(mergedData$GDP[1]))
as.numeric("2,584")
gdp <- read.csv("gdp1.csv")
mergedData <- merge(gdp,edu,by.x="CountryCode",by.y="CountryCode")
rankGroups <- cut(as.numeric(mergedData$GDP),breaks = quantile(mergedData$GDP, probs=seq(0,1,0.2)))
table(rankGroups)
mergedData$rankGroups <- cut(as.numeric(mergedData$GDP),breaks = quantile(mergedData$GDP, probs=seq(0,1,0.2)))
table(mergedData$rankGroups,mergedData$Income.Group)
setwd("C:/00/r/expDataProy1/ExData_Plotting1")
source('C:/00/r/expDataProy1/ExData_Plotting1/prepareData.R')
allHouseHold <- read.csv("alldata.txt", sep = ";",na.strings = "?")
dim (allHouseHold)
allHouseHold$Date <- strptime(paste(allHouseHold$Date,allHouseHold$Time), "%d/%m/%Y %H:%M:%S")
dateTime1  <- as.POSIXlt(paste(as.Date(data$Date,format="%d/%m/%Y"), data$Time, sep=" "))
dateTime1  <- as.POSIXlt(paste(as.Date(allHouseHold$Date,format="%d/%m/%Y"), allHouseHold$Time, sep=" "))
clas(dateTime1)
class(dateTime1)
head(dateTime1)
dateTime1[2]-dateTime1[1]
dateTime1[5]-dateTime1[1]
dateTime2  <- strptime(paste(allHouseHold$Date,allHouseHold$Time), "%d/%m/%Y %H:%M:%S")
identical(dateTime1, dateTime2)
class(dateTime2)
head(dateTime2)
dateTime3  <- strptime(paste(as.Date(data$Date,format="%d/%m/%Y"), data$Time, sep=" "))
dateTime3  <- strptime(paste(as.Date(allHouseHold$Date,format="%d/%m/%Y"), allHouseHold$Time, sep=" "))
dateTime3  <- strptime(paste(as.Date(allHouseHold$Date,format="%d/%m/%Y"), allHouseHold$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
head(dateTime3)
beg <- as.POSIXlt(as.Date("2007-02-01"))
beg
beg <- as.POSIXlt(as.Date("2007-02-01"),tz = "COT")
beg
beg <- as.POSIXlt(as.Date("2007-02-01"),tz = "Colombia")
beg
beg <- as.POSIXlt(as.Date("2007-02-01"),tz = "UTC-5")
beg <- as.POSIXlt(as.Date("2007-02-01"),tz = "UTC-5")
br
beg
dateTime1[1]
beg <- as.POSIXlt(as.Date("2007/02/01 00:00:00"))
beg
beg <- as.POSIXlt(as.Date("01/02/2007",format="%d/%m/%Y 00:00:00"))
beg
beg <- as.POSIXlt(as.Date("01/02/2007",format="%d/%m/%Y"))
beg
beg <- as.POSIXct(as.Date("01/02/2007",format="%d/%m/%Y"))
beg
beg <- as.POSIXct(as.Date("01/02/2007",format="%d/%m/%Y"),tz = "COT")
beg
beg <- as.POSIXct(as.Date("01/02/2007",format="%d/%m/%Y"),tz = "UTC")
beg
strptime(x = "16/12/2006")
strptime(x = "16/12/2006", format="%d/%m/%Y")
strptime(x = "16/12/2006 08:13:00", format="%d/%m/%Y")
strptime(x = "16/12/2006 08:13:00", format="%d/%m/%Y %H:%M:%S")
paste(allHouseHold$Date[1],allHouseHold$Time[1])
allHouseHold <- read.csv(file, sep = ";",na.strings = "?")
allHouseHold <- read.csv("alldata.txt", sep = ";",na.strings = "?")
paste(allHouseHold$Date[1],allHouseHold$Time[1])
strptime(allHouseHold$Date[1],allHouseHold$Time[1], format="%d/%m/%Y %H:%M:%S")
strptime(paste(allHouseHold$Date[1],allHouseHold$Time[1]), format="%d/%m/%Y %H:%M:%S")
strptime(x = "01/02/2007 00:00:00", format="%d/%m/%Y %H:%M:%S")
beg <- strptime(x = "01/02/2007 00:00:00", format="%d/%m/%Y %H:%M:%S")
end <- strptime(x = "02/02/2007 23:59:59", format="%d/%m/%Y %H:%M:%S")
end
end-beg
end <- strptime(x = "03/02/2007 00:00:00", format="%d/%m/%Y %H:%M:%S")
end-beg
dateTime4 <-  strptime(paste(allHouseHold$Date,allHouseHold$Time), format="%d/%m/%Y %H:%M:%S")
head(dateTime4)
inRange <- dateTime4[(dateTime4>=beg&&dateTime4<end)]
dim(inRange)
length(inRange)
inRange
dateTime4>=beg
gt <- dateTime4>=beg
sum(gt)
inRange <- dateTime4[(dateTime4>=beg&dateTime4<end)]
length(inRange)
source('C:/00/r/expDataProy1/ExData_Plotting1/prepareData.R')
wd <- prepareData(file = "alldata.txt")
str(wd)
head(wd[c(1:4)])
head(wd)
dim(wd)
source('C:/00/r/expDataProy1/ExData_Plotting1/plot1.R')
source('C:/00/r/expDataProy1/ExData_Plotting1/plot1.R')
plot1()
source('C:/00/r/expDataProy1/ExData_Plotting1/plot1.R')
source('C:/00/r/expDataProy1/ExData_Plotting1/prepareData.R')
source('C:/00/r/expDataProy1/ExData_Plotting1/prepareData.R')
source('C:/00/r/expDataProy1/ExData_Plotting1/plot1.R')
source('C:/00/r/expDataProy1/ExData_Plotting1/prepareData.R')
